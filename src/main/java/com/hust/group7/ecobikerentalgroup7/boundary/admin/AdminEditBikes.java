/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hust.group7.ecobikerentalgroup7.boundary.admin;

import com.hust.group7.ecobikerentalgroup7.DataBase;
import com.hust.group7.ecobikerentalgroup7.Entity.Bike;
import com.hust.group7.ecobikerentalgroup7.Entity.Station;
import com.hust.group7.ecobikerentalgroup7.Entity.User;
import com.hust.group7.ecobikerentalgroup7.MainEntry;
import com.hust.group7.ecobikerentalgroup7.boundary.HomeScreen;
import com.hust.group7.ecobikerentalgroup7.boundary.LoginScreen;
import com.hust.group7.ecobikerentalgroup7.boundary.ViewListBikeScreen;
import com.hust.group7.ecobikerentalgroup7.boundary.ViewListBikeScreen;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class AdminEditBikes extends javax.swing.JFrame {

    /**
     * Creates new form StationInfoScreen
     */
    private JFrame backScreen;
    private Bike bike;
    private User user;
    private DataBase db;
    private Station station;

    public AdminEditBikes(JFrame backScreen, User user, Bike bike) throws SQLException {
        initComponents();
        this.bike = bike;
        this.user = user;
        this.station = new Station();
        System.out.println("station name info: " + bike.getName());
        this.backScreen = backScreen;
        db = new DataBase();
        showBikeInfo();
        imageCodePanel.showImage(new File(bike.getImage()));

    }

    private void showBikeInfo() {
        DefaultTableModel model = (DefaultTableModel) bikesInfoTable.getModel();
        System.out.println("set model infor");
        model.setValueAt(bike.getName(), 0, 1);
        model.setValueAt(bike.getType(), 1, 1);
        model.setValueAt(bike.getWeight(), 2, 1);
        model.setValueAt(bike.getLicensePlate(), 3, 1);
        model.setValueAt(bike.getManufacturingDate(), 4, 1);
        
        model.setValueAt(bike.getProducer(), 5, 1);
        model.setValueAt(bike.getBateryPercentage(), 6, 1);
        model.setValueAt(bike.getLoadCycles(), 7, 1);
        model.setValueAt(bike.getTimeRemaining(), 8, 1);
        model.setValueAt(bike.getBarcode(), 9, 1);
        if (bike.getStatus() == 0) {
            model.setValueAt("Available", 10, 1);
        } else {
            model.setValueAt("Busy", 10, 1);
        }
        String sql = "SELECT * FROM stations WHERE id = " + bike.getStationId();
        try {
            ResultSet rs = db.query(sql);
            rs.next();
            station.setStationId(rs.getInt("id"));
            station.setName(rs.getString("name"));
            station.setAddress(rs.getString("address"));
            station.setNumberOfDocks(rs.getInt("number_of_docks"));
            station.setDistance(rs.getFloat("distance_to_walk"));
            station.setTime(Float.valueOf(rs.getString("time_to_walk")));
            model.setValueAt(station.getName(), 11, 1);

            sql = "SELECT * FROM cost WHERE bike_type = '" + bike.getType() + "'";
            rs = db.query(sql);
            rs.next();
            model.setValueAt(rs.getFloat("deposit"), 12, 1);

        } catch (SQLException ex) {
            Logger.getLogger(AdminEditBikes.class.getName()).log(Level.SEVERE, null, ex);
        }

        stationNameTitle.setText(bike.getName());

        model.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stationNameTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bikesInfoTable = new javax.swing.JTable();
        imageCodePanel = new com.hust.group7.ecobikerentalgroup7.boundary.ImageCodePanel();
        backButton = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Edit Station");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        stationNameTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        stationNameTitle.setText("Bike name");

        bikesInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Name", null},
                {"Type", null},
                {"Weight", null},
                {"License Plate", null},
                {"Manufacturing date", null},
                {"Producer", null},
                {"Battery", null},
                {"Load Cycles", null},
                {"Time remaining", null},
                {"Barcode", null},
                {"Status", null},
                {"Station", null},
                {"Price", null}
            },
            new String [] {
                "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bikesInfoTable.setColumnSelectionAllowed(true);
        bikesInfoTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(bikesInfoTable);
        bikesInfoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (bikesInfoTable.getColumnModel().getColumnCount() > 0) {
            bikesInfoTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            bikesInfoTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        }

        imageCodePanel.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout imageCodePanelLayout = new javax.swing.GroupLayout(imageCodePanel);
        imageCodePanel.setLayout(imageCodePanelLayout);
        imageCodePanelLayout.setHorizontalGroup(
            imageCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 187, Short.MAX_VALUE)
        );
        imageCodePanelLayout.setVerticalGroup(
            imageCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(imageCodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(stationNameTitle)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(stationNameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageCodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(btnSave))
                .addGap(37, 37, 37))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        try {
            MainEntry.move(this, new AdminManageBikes(new HomeScreen(user, new LoginScreen()), user, station));
        } catch (SQLException ex) {
            Logger.getLogger(AdminEditBikes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) bikesInfoTable.getModel();
        model.fireTableDataChanged();

        String bikeName = model.getValueAt(0, 1).toString(),
                bikeType = model.getValueAt(1, 1).toString(),
                weight = model.getValueAt(2, 1).toString(),
                plate = model.getValueAt(3, 1).toString(),
                manuDate = model.getValueAt(4, 1).toString(),
                producer = model.getValueAt(5, 1).toString(),
                battery = model.getValueAt(6, 1).toString(),
                loadCycle = model.getValueAt(7, 1).toString(),
                timeRemain = model.getValueAt(8, 1).toString(),
                barcode = model.getValueAt(9, 1).toString(),
                station = model.getValueAt(11, 1).toString(),
                status = model.getValueAt(10, 1).toString(),
                price = model.getValueAt(12, 1).toString();

        if (status.equals("Available")) {
            status = "0";
        } else if (status.equals("Busy")) {
            status = "1";
        }
        String sql = "UPDATE stations SET name = '" + station + "' WHERE id = " + this.station.getStationId();
        try {
            db.update(sql);
            sql = "UPDATE `tkxdpm`.`bikes` SET `name` = '" + bikeName + "', `type` = '" + bikeType + "', `weight` = '" + weight + "', `license_plate` = '" + plate
                    + "', `manuafacturing_date` = '" + manuDate + "', `producer` = '" + producer + "', `batery_percentage` = '" + battery + "', `load_cycles` = '" + loadCycle
                    + "', `time_remaining` = '" + timeRemain + "', `barcode` = '" + barcode + "', `status` = '" + status + "', `station_id` = '" + this.station.getStationId()
                    + "' WHERE (`id` = '" + this.bike.getBikeId() + "')";
            db.update(sql);
            sql = "UPDATE cost SET deposit = " + Float.valueOf(price) + " WHERE bike_type = '" + this.bike.getType() + "'";
            db.update(sql);
            JOptionPane.showMessageDialog(this, "Saved!");
        } catch (SQLException ex) {
            Logger.getLogger(AdminEditBikes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable bikesInfoTable;
    private javax.swing.JButton btnSave;
    private com.hust.group7.ecobikerentalgroup7.boundary.ImageCodePanel imageCodePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel stationNameTitle;
    // End of variables declaration//GEN-END:variables
}
